import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = '7909844613:AAEoh317Q8ah89Bii-WydIiaL0ecMMzCx-0'
CHANNEL_ID = '@Podsluhaprimkvn'
COOLDOWN = 30

last_message_time = {}

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –∫—Ä—ã—Å–∏–Ω—ã–π —Å–æ–±—Ä–∞—Ç! –ü–∏—à–∏ —Å–≤–æ–π –ø–∏—Å–∫ –∏–ª–∏ –∫–∏–¥–∞–π —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Äî –∏ —è –ø–µ—Ä–µ–¥–∞–º –≤ –Ω–æ—Ä—É.")

@dp.message()
async def anon_forward(message: Message):
    user_id = message.from_user.id
    now = asyncio.get_event_loop().time()

    if user_id in last_message_time and now - last_message_time[user_id] < COOLDOWN:
        await message.answer("–°–ü–ê–ú–ò–¢–¨ –ó–ê–ü–†–ï–©–ï–ù–û! –ë–ê–ù 30 –°–ï–ö.")
        return

    last_message_time[user_id] = now

    if message.text:
        text = message.text.strip()
        banned_words = ['http', '—Ä–µ–∫–ª–∞–º–∞', '–ø–æ–¥–ø–∏—à–∏—Å—å']
        if any(word in text.lower() for word in banned_words) or len(text) < 10:
            await message.answer("–ß—Ç–æ –∑–∞ —Ö—É–π–Ω—é —Ç—ã –º–Ω–µ —à–ª–µ—à—å??")
            return
        await bot.send_message(CHANNEL_ID, f"–ö—Ä—ã—Å–∏–Ω—ã–π –ø–∏—Å–∫:\n{text}")
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    elif message.photo:
        caption = message.caption or ""
        await bot.send_photo(CHANNEL_ID, message.photo[-1].file_id, caption=f"üêÄ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Ñ–æ—Ç–æ:\n{caption}")
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –º–µ–º.")

    elif message.video:
        caption = message.caption or ""
        await bot.send_video(CHANNEL_ID, message.video.file_id, caption=f"üêÄ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≤–∏–¥–µ–æ:\n{caption}")
        await message.answer("–í–∏–¥–µ–æ–ø—Ä—É—Ñ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")

    else:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ —è –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ. –ê –≥–æ–≤–Ω–æ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –ø—Ä–∏—Å–ª–∞–ª, —è –Ω–µ –ø–æ–Ω.")

async def monthly_reminder():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–ê–ü–ò–°–ê–¢–¨ –°–õ–£–•", url="https://t.me/Anoanoano1Bot")]
    ])
    await bot.send_message(CHANNEL_ID, "üì¢ –•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ?", reply_markup=keyboard)

    while True:
        await asyncio.sleep(30 * 24 * 60 * 60)
        await bot.send_message(CHANNEL_ID, "üì¢ –•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ?", reply_markup=keyboard)

async def main():
    asyncio.create_task(monthly_reminder())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
